--Request 1

SELECT DISTINCT market
FROM   dim_customer
WHERE  ( customer = 'Atliq Exclusive' )
       AND ( region = 'APAC' ); 

--Request 2

WITH cte1
     AS (SELECT Count(DISTINCT product_code) AS unique_product_2020
         FROM   fact_sales_monthly
         WHERE  fiscal_year = 2020),
     cte2
     AS (SELECT Count(DISTINCT product_code) AS unique_product_2021
         FROM   fact_sales_monthly
         WHERE  fiscal_year = 2021)
SELECT unique_product_2020,
       unique_product_2021,
       ( unique_product_2021 - unique_product_2020 ) * 100 / unique_product_2020
       AS
       pct_change
FROM   cte1
       CROSS JOIN cte2; 

--Request 3

SELECT DISTINCT segment,
                Count(product_code) AS product_count
FROM   dim_product
GROUP  BY segment
ORDER  BY product_count DESC 


--Request 4

WITH segment_cte
     AS (SELECT segment,
                fiscal_year,
                Count(DISTINCT p.product_code) AS product_count
         FROM   fact_sales_monthly f
                JOIN dim_product p
                  ON p.product_code = f.product_code
         GROUP  BY segment,
                   fiscal_year)
SELECT segment_2020.segment                                        AS segment,
       segment_2020.product_count                                  AS
       product_count_2020,
       segment_2021.product_count                                  AS
       product_count_2021,
       ( segment_2021.product_count - segment_2020.product_count ) AS difference
FROM   (SELECT segment,
               product_count
        FROM   segment_cte
        WHERE  fiscal_year = 2020) AS segment_2020
       JOIN (SELECT segment,
                    product_count
             FROM   segment_cte
             WHERE  fiscal_year = 2021) AS segment_2021
         ON segment_2020.segment = segment_2021.segment
ORDER  BY difference DESC;

--Request 5

--get lowest and highest manufacturing cost
WITH min_max_cost
     AS (SELECT Min(manufacturing_cost) AS min_cost,
                Max(manufacturing_cost) AS max_cost
         FROM   fact_manufacturing_cost),
     lowest_cost_product
     AS (SELECT f.product_code,
                p.product,
                f.manufacturing_cost
         FROM   fact_manufacturing_cost f
                JOIN dim_product p
                  ON f.product_code = p.product_code
         WHERE  f.manufacturing_cost = (SELECT min_cost
                                        FROM   min_max_cost)),
     highest_cost_product
     AS (SELECT f.product_code,
                p.product,
                f.manufacturing_cost
         FROM   fact_manufacturing_cost f
                JOIN dim_product p
                  ON f.product_code = p.product_code
         WHERE  f.manufacturing_cost = (SELECT max_cost
                                        FROM   min_max_cost))
--combine all min and max cost
SELECT *
FROM   lowest_cost_product
UNION ALL
SELECT *
FROM   highest_cost_product; 

--Request 6

SELECT TOP 5 f.customer_code,
             c.customer,
             Concat(Round(Avg(pre_invoice_discount_pct) * 100, 2), '%') AS
             average_discount_percentage
FROM   fact_pre_invoice_deductions f
       JOIN dim_customer c
         ON f.customer_code = c.customer_code
WHERE  f.fiscal_year = 2021
       AND market = 'India'
GROUP  BY f.customer_code,
          c.customer
ORDER  BY Avg(f.pre_invoice_discount_pct) DESC; 


--Request 7

SELECT Datename(month, f.date)              AS month,
       Year(f.date)                         AS year,
       Sum(f.sold_quantity * g.gross_price) AS gross_sales_amount
FROM   fact_sales_monthly f
       JOIN fact_gross_price g
         ON f.product_code = g.product_code
       JOIN dim_customer d
         ON d.customer_code = f.customer_code
WHERE  d.customer = 'Atliq Exclusive'
GROUP  BY Datename(month, f.date),
          Year(f.date)
ORDER  BY year; 

--Request 8

WITH sales_with_quarters
     AS (SELECT Month(date) AS Month,
                Year(date)  AS Year,
                sold_quantity,
                CASE
                  WHEN Month(date) IN ( 9, 10, 11 ) THEN 'Q1'
                  WHEN Month(date) IN ( 12, 1, 2 ) THEN 'Q2'
                  WHEN Month(date) IN ( 3, 4, 5 ) THEN 'Q3'
                  WHEN Month(date) IN ( 6, 7, 8 ) THEN 'Q4'
                END         AS quarter
         FROM   fact_sales_monthly
         WHERE  Year(date) = 2020)
SELECT quarter,
       Sum(sold_quantity) AS total_sold_quantity
FROM   sales_with_quarters
GROUP  BY quarter
ORDER  BY total_sold_quantity DESC 

--Request 9

	WITH gross_sales
     AS (SELECT channel,
                Round(Sum(( gross_price * sold_quantity ) / 1000000), 2) AS
                   gross_sales_mln
         FROM   dim_customer dc
                JOIN fact_sales_monthly fsm
                  ON dc.customer_code = fsm.customer_code
                JOIN fact_gross_price fgp
                  ON fsm.product_code = fgp.product_code
         WHERE  fsm.fiscal_year = 2021
         GROUP  BY channel),
     total_sales
     AS (SELECT Sum(gross_sales_mln) AS overall_gross_sales
         FROM   gross_sales)
SELECT gs.channel,
       gs.gross_sales_mln,
       Round(( gs.gross_sales_mln * 100 ) / ts.overall_gross_sales, 2) AS
       percentage
FROM   gross_sales gs
       CROSS JOIN total_sales ts
ORDER  BY gs.gross_sales_mln DESC 

--Request 10

WITH ranked_products
     AS (SELECT dp.division,
                fsm.product_code,
                Concat(dp.product, '(', dp.variant, ')')   AS product,
                Sum(fsm.sold_quantity)                     AS
                total_sold_quantity,
                Rank()
                  OVER (
                    partition BY dp.division
                    ORDER BY Sum(fsm.sold_quantity) DESC ) AS rank_order
         FROM   dim_product dp
                JOIN fact_sales_monthly fsm
                  ON dp.product_code = fsm.product_code
         WHERE  fsm.fiscal_year = 2021
         GROUP  BY dp.division,
                   fsm.product_code,
                   product,
                   variant)
SELECT division,
       product_code,
       product,
       total_sold_quantity,
       rank_order
FROM   ranked_products
WHERE  rank_order <= 3
ORDER  BY division,
          rank_order; 
